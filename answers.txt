Q1: - What are the three uses of the curly brackets {} in Ruby?
1) to designate code blocks in place of do/end
2) to create a new hash object
3) string variable interpolation, used in context with double quotes and "#{variable}"

Q2: - What is a regular expression and what is a common use for them?
A regular expression is a string pattern matching language that is used to find, extract, and replace substrings of text from a larger string

Q3: - What is the difference between how a String, a symbol, a FixNum, and a Float are stored in Ruby?
A Ruby symbol is immutable and there is only one memory object for a given symbol name.
A Ruby string can be changed and every usage/instance of a string creates a distinct in-memory instantiation of the string.
FixNums are integers that are < 31/63 bits (depending on 32-bit or 64-bit architecture). They are immutable like symbols.  They simply exist and cannot be created explicitly.
Floats are double-precision 64-bit numbers that are inexact representations of numbers.  Each instantiation of a float gets a unique ObjectID in memory.

Q4: - Are these two statements equivalent? Why or Why Not?
    1. x, y = "hello", "hello"
    2. x = y = "hello"
No, they are not equivalent.  In #1 x and y will point to different object_id's in memory, in #2 x and y will point to the same object_id

Q5: - What is the difference between a Range and an Array?
A range is defined by a starting value, an ending value and an enumerator to move between the values.
An array is made up of discretely defined in-memory object_id's for each individual element of the array.

Q6: - Why would I use a Hash instead of an Array?
If you were trying to create a push/pop stack
If you were working with numbered lists of items where the specific order of the items was important
If you were trying to minimize memory usage

Q7: - What is your favorite thing about Ruby so far?
It is embraces TIMTOWTDI as Perl does.
It obviously makes an effort to remove as much of the "hassle" from programming as possible.

Q8: - What is your least favorite thing about Ruby so far?
As I'm learning all the different ways to do things, I feel like I'm ready to charge out and start using Ruby to write code, except that I'm still inclined to write code the way I feel comfortable writing code, which isn't perhaps always the "ruby way".
Now, maybe this is simply my mis-perception of the "ruby way" with the way a lot of Ruby programmers seem to like to write code (the difference is subtle, I understand).
But, I feel like if I were writing the code the way I *want* to be writing it, that I'd somehow be "doing it wrong" even though the code would still work in the end.  I *want* to write nice happy elegant code, but I still feel like I'm struggling to think in this "ruby way"
I'm trying to force myself to structure my code in ways that I'm not used to....hopefully it will become more second nature as I go along...

